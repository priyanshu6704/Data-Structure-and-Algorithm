/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void nthLevel1(TreeNode root, List<Integer> list,int n){
        if(root==null) return;
        if(n==1){
            list.add(root.val);
            return;
        }
        nthLevel1(root.left,list,n-1);
        nthLevel1(root.right,list,n-1);
    }
    public void nthLevel2(TreeNode  root, List<Integer> list, int n){
        if(root==null) return;
        if(n==1){
            list.add(root.val);
            return;
        }
        nthLevel2(root.right,list,n-1);
        nthLevel2(root.left,list,n-1);
    }
    public int height(TreeNode root){
        if(root==null) return 0;
        if(root.left==null && root.right==null) return 0;
        return 1+ Math.max(height(root.left),height(root.right));
    }
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        int level=height(root)+1;
       
        List<List<Integer>> ans=new ArrayList<>();
         if(root==null)return ans;
        for(int i=1;i<=level;i++){
            List<Integer> list=new ArrayList<>();
            if(i%2!=0)  nthLevel1(root,list,i);
            else nthLevel2(root,list,i);
            ans.add(list); 
        }
        return ans;
    }
}
