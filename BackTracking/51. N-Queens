class Solution {
    public boolean isSafe(char[][] board,int row,int col){
        for(int j=0;j<board.length;j++){
            if(board[row][j]=='Q') return false;
        }
        for(int i=0;i<board.length;i++){
            if(board[i][col]=='Q') return false;
        }
        int i=row;
        int j=col;
        while(i>=0 && j<board.length){
            if(board[i][j]=='Q') return false;
            i--;
            j++;
        }
        i=row;
        j=col;
        while(i<board.length && j<board.length){
            if(board[i][j]=='Q')return false;
            i++;
            j++;
        }
        i=row;
        j=col;
        while(i<board.length && j>=0){
            if(board[i][j]=='Q')return false;
            i++;
            j--;
        }
        i=row;
        j=col;
        while(i>=0 && j>=0){
            if(board[i][j]=='Q') return false;
            i--;
            j--;
        }
        return true;
    }
    public void Nqueen(char[][] board, int row, List<List<String>> res){
        if(row==board.length){
            List<String> list=new ArrayList<>();
            for(int i=0;i<board.length;i++){
                String s="";
                for(int j=0;j<board.length;j++){
                    s+=board[i][j];
                }
                list.add(s);
            }
            res.add(list);
            return;
        }
        for(int col=0;col<board.length;col++){
            if(isSafe(board,row,col)){
                board[row][col]='Q';
                Nqueen(board,row+1,res);
                board[row][col]='.';
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res=new ArrayList<>();
        char[][] board=new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        Nqueen(board,0,res);
        return res;
    }
}
