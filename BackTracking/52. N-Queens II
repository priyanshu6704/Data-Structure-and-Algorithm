class Solution {
    public boolean isSafe(char[][] board, int row, int col){
        for(int i=0;i<board.length;i++){
            if(board[row][i]=='Q') return false;
        }
        for(int i=0;i<board.length;i++){
            if(board[i][col]=='Q') return false;
        }
        int i=row;
        int j=col;
        while(i>=0 && j<board.length){
            if(board[i][j]=='Q') return false;
            i--;
            j++;
        }
        i=row;
        j=col;
        while(i<board.length && j<board.length){
            if(board[i][j]=='Q') return false;
            i++;
            j++;
        }
        i=row;
        j=col;
        while(i<board.length && j>=0){
            if(board[i][j]=='Q') return false;
            i++;
            j--;
        }
        i=row;
        j=col;
        while(i>=0 && j>=0){
            if(board[i][j]=='Q') return false;
            i--;
            j--;
        }
        return true;
    }
    public int nQueen(char[][] board,int row){
        if(row==board.length){
            return 1;
        }
        int count=0;
        for(int i=0;i<board.length;i++){
            if(isSafe(board,row,i)){
                board[row][i]='Q';
                count+=nQueen(board,row+1);
                board[row][i]='.';
            }
        }
        return count;
    } 
    public int totalNQueens(int n) {
        char[][] board=new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
         return nQueen(board,0);
    }
}
