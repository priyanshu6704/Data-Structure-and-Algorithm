/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode getNode(ListNode head,int x){
        ListNode temp=head;
        
        for(int i=0;i<x;i++){
            temp=temp.next;
        }
        return temp;
    }
    public void reverse(ListNode head,int l,int h){
        int low=l;
        int high=h;
        while(low<high){
            ListNode left=getNode(head,low);
            ListNode right=getNode(head,high);
            int t=left.val;
            left.val=right.val;
            right.val=t;
            low++;
            high--;
        }
    }
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null || head.next==null|| k==0)return head;
        int count=0;
        ListNode temp=head;
        while(temp!=null){
            count++;
            temp=temp.next;
        }
        if(k>count){
            k=k%count;
        }
        reverse(head,0,count-k-1);
        reverse(head,count-k,count-1);
        reverse(head,0,count-1);
        return head;
        
    }
}
